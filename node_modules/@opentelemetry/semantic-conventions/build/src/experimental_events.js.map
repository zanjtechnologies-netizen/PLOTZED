{"version":3,"file":"experimental_events.js","sourceRoot":"","sources":["../../src/experimental_events.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,mHAAmH;AACnH,mHAAmH;AACnH,mHAAmH;AAEnH;;;;;;GAMG;AACU,QAAA,cAAc,GAAG,UAAmB,CAAC;AAElD;;;;;;GAMG;AACU,QAAA,sBAAsB,GAAG,kBAA2B,CAAC;AAElE;;;;;;GAMG;AACU,QAAA,sBAAsB,GAAG,kBAA2B,CAAC;AAElE;;;;;;GAMG;AACU,QAAA,qBAAqB,GAAG,iBAA0B,CAAC;AAEhE;;;;GAIG;AACU,QAAA,wBAAwB,GAAG,oBAA6B,CAAC;AAEtE;;;;GAIG;AACU,QAAA,uBAAuB,GAAG,mBAA4B,CAAC;AAEpE;;;;;;;;GAQG;AACU,QAAA,0BAA0B,GAAG,sBAA+B,CAAC;AAE1E;;;;;;GAMG;AACU,QAAA,6BAA6B,GAAG,yBAAkC,CAAC;AAEhF;;;;;;GAMG;AACU,QAAA,8BAA8B,GAAG,0BAAmC,CAAC;AAElF;;;;;;GAMG;AACU,QAAA,mBAAmB,GAAG,eAAwB,CAAC;AAE5D;;;;;;GAMG;AACU,QAAA,+CAA+C,GAAG,2CAAoD,CAAC;AAEpH;;;;;;GAMG;AACU,QAAA,2BAA2B,GAAG,uBAAgC,CAAC;AAE5E;;;;;;GAMG;AACU,QAAA,yBAAyB,GAAG,qBAA8B,CAAC;AAExE;;;;;;GAMG;AACU,QAAA,yBAAyB,GAAG,qBAA8B,CAAC;AAExE;;;;;;GAMG;AACU,QAAA,iBAAiB,GAAG,aAAsB,CAAC;AAExD;;;;;;GAMG;AACU,QAAA,iBAAiB,GAAG,aAAsB,CAAC;AAExD;;;;;;;GAOG;AACU,QAAA,mBAAmB,GAAG,eAAwB,CAAC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//-----------------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates/registry/ts-experimental/events.ts.j2\n//-----------------------------------------------------------------------------------------------------------------\n\n/**\n * This event indicates that the application has detected substandard UI rendering performance.\n *\n * @note Jank happens when the UI is rendered slowly enough for the user to experience some disruption or sluggishness.\n *\n * @experimental This event is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const EVENT_APP_JANK = 'app.jank' as const;\n\n/**\n * This event represents an instantaneous click on the screen of an application.\n *\n * @note The `app.screen.click` event can be used to indicate that a user has clicked or tapped on the screen portion of an application. Clicks outside of an application's active area **SHOULD NOT** generate this event. This event does not differentiate between touch/mouse down and touch/mouse up. Implementations **SHOULD** give preference to generating this event at the time the click is complete, typically on touch release or mouse up. The location of the click event **MUST** be provided in absolute screen pixels.\n *\n * @experimental This event is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const EVENT_APP_SCREEN_CLICK = 'app.screen.click' as const;\n\n/**\n * This event indicates that an application widget has been clicked.\n *\n * @note Use this event to indicate that visual application component has been clicked, typically through a user's manual interaction.\n *\n * @experimental This event is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const EVENT_APP_WIDGET_CLICK = 'app.widget.click' as const;\n\n/**\n * Deprecated. Use `azure.resource.log` instead.\n *\n * @experimental This event is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `azure.resource.log`.\n */\nexport const EVENT_AZ_RESOURCE_LOG = 'az.resource.log' as const;\n\n/**\n * Describes Azure Resource Log event, see [Azure Resource Log Top-level Schema](https://learn.microsoft.com/azure/azure-monitor/essentials/resource-logs-schema#top-level-common-schema) for more details.\n *\n * @experimental This event is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const EVENT_AZURE_RESOURCE_LOG = 'azure.resource.log' as const;\n\n/**\n * This event describes the website performance metrics introduced by Google, See [web vitals](https://web.dev/vitals).\n *\n * @experimental This event is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const EVENT_BROWSER_WEB_VITAL = 'browser.web_vital' as const;\n\n/**\n * This event represents an occurrence of a lifecycle transition on Android or iOS platform.\n *\n * @note The event body fields **MUST** be used to describe the state of the application at the time of the event.\n * This event is meant to be used in conjunction with `os.name` [resource semantic convention](/docs/resource/os.md) to identify the mobile operating system (e.g. Android, iOS).\n * The `android.app.state` and `ios.app.state` fields are mutually exclusive and **MUST NOT** be used together, each field **MUST** be used with its corresponding `os.name` value.\n *\n * @experimental This event is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const EVENT_DEVICE_APP_LIFECYCLE = 'device.app.lifecycle' as const;\n\n/**\n * Defines feature flag evaluation as an event.\n *\n * @note A `feature_flag.evaluation` event **SHOULD** be emitted whenever a feature flag value is evaluated, which may happen many times over the course of an application lifecycle. For example, a website A/B testing different animations may evaluate a flag each time a button is clicked. A `feature_flag.evaluation` event is emitted on each evaluation even if the result is the same.\n *\n * @experimental This event is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const EVENT_FEATURE_FLAG_EVALUATION = 'feature_flag.evaluation' as const;\n\n/**\n * This event describes the assistant message passed to GenAI system.\n *\n * @experimental This event is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Chat history is reported on `gen_ai.input.messages` attribute on spans or `gen_ai.client.inference.operation.details` event.\n */\nexport const EVENT_GEN_AI_ASSISTANT_MESSAGE = 'gen_ai.assistant.message' as const;\n\n/**\n * This event describes the Gen AI response message.\n *\n * @experimental This event is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Chat history is reported on `gen_ai.output.messages` attribute on spans or `gen_ai.client.inference.operation.details` event.\n */\nexport const EVENT_GEN_AI_CHOICE = 'gen_ai.choice' as const;\n\n/**\n * Describes the details of a GenAI completion request including chat history and parameters.\n *\n * @note This event is opt-in and could be used to store input and output details independently from traces.\n *\n * @experimental This event is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const EVENT_GEN_AI_CLIENT_INFERENCE_OPERATION_DETAILS = 'gen_ai.client.inference.operation.details' as const;\n\n/**\n * This event describes the system instructions passed to the GenAI model.\n *\n * @experimental This event is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Chat history is reported on `gen_ai.system_instructions` attribute on spans or `gen_ai.client.inference.operation.details` event.\n */\nexport const EVENT_GEN_AI_SYSTEM_MESSAGE = 'gen_ai.system.message' as const;\n\n/**\n * This event describes the response from a tool or function call passed to the GenAI model.\n *\n * @experimental This event is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Chat history is reported on `gen_ai.input.messages` attribute on spans or `gen_ai.client.inference.operation.details` event.\n */\nexport const EVENT_GEN_AI_TOOL_MESSAGE = 'gen_ai.tool.message' as const;\n\n/**\n * This event describes the user message passed to the GenAI model.\n *\n * @experimental This event is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Chat history is reported on `gen_ai.input.messages` attribute on spans or `gen_ai.client.inference.operation.details` event.\n */\nexport const EVENT_GEN_AI_USER_MESSAGE = 'gen_ai.user.message' as const;\n\n/**\n * Describes a message sent or received within the context of an RPC call.\n *\n * @note In the lifetime of an RPC stream, an event for each message sent/received on client and server spans **SHOULD** be created. In case of unary calls only one sent and one received message will be recorded for both client and server spans.\n *\n * @experimental This event is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const EVENT_RPC_MESSAGE = 'rpc.message' as const;\n\n/**\n * Indicates that a session has ended.\n *\n * @note For instrumentation that tracks user behavior during user sessions, a `session.end` event **SHOULD** be emitted every time a session ends. When a session ends and continues as a new session, this event **SHOULD** be emitted prior to the `session.start` event.\n *\n * @experimental This event is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const EVENT_SESSION_END = 'session.end' as const;\n\n/**\n * Indicates that a new session has been started, optionally linking to the prior session.\n *\n * @note For instrumentation that tracks user behavior during user sessions, a `session.start` event **MUST** be emitted every time a session is created. When a new session is created as a continuation of a prior session, the `session.previous_id` **SHOULD** be included in the event. The values of `session.id` and `session.previous_id` **MUST** be different.\n * When the `session.start` event contains both `session.id` and `session.previous_id` fields, the event indicates that the previous session has ended. If the session ID in `session.previous_id` has not yet ended via explicit `session.end` event, then the consumer **SHOULD** treat this continuation event as semantically equivalent to `session.end(session.previous_id)` and `session.start(session.id)`.\n *\n * @experimental This event is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const EVENT_SESSION_START = 'session.start' as const;\n\n"]}