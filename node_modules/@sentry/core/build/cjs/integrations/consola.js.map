{"version":3,"file":"consola.js","sources":["../../../src/integrations/consola.ts"],"sourcesContent":["import type { Client } from '../client';\nimport { getClient } from '../currentScopes';\nimport { _INTERNAL_captureLog } from '../logs/internal';\nimport { formatConsoleArgs } from '../logs/utils';\nimport type { LogSeverityLevel } from '../types-hoist/log';\n\n/**\n * Options for the Sentry Consola reporter.\n */\ninterface ConsolaReporterOptions {\n  /**\n   * Use this option to filter which levels should be captured. By default, all levels are captured.\n   *\n   * @example\n   * ```ts\n   * const sentryReporter = Sentry.createConsolaReporter({\n   *   // Only capture error and warn logs\n   *   levels: ['error', 'warn'],\n   * });\n   * consola.addReporter(sentryReporter);\n   * ```\n   */\n  levels?: Array<LogSeverityLevel>;\n\n  /**\n   * Optionally provide a specific Sentry client instance to use for capturing logs.\n   * If not provided, the current client will be retrieved using `getClient()`.\n   *\n   * This is useful when you want to use specific client options for log normalization\n   * or when working with multiple client instances.\n   *\n   * @example\n   * ```ts\n   * const sentryReporter = Sentry.createConsolaReporter({\n   *   client: myCustomClient,\n   * });\n   * ```\n   */\n  client?: Client;\n}\n\nexport interface ConsolaReporter {\n  log: (logObj: ConsolaLogObject) => void;\n}\n\n/**\n * Represents a log object that Consola reporters receive.\n *\n * This interface matches the structure of log objects passed to Consola reporters.\n * See: https://github.com/unjs/consola#custom-reporters\n *\n * @example\n * ```ts\n * const reporter = {\n *   log(logObj: ConsolaLogObject) {\n *     console.log(`[${logObj.type}] ${logObj.message || logObj.args?.join(' ')}`);\n *   }\n * };\n * consola.addReporter(reporter);\n * ```\n */\nexport interface ConsolaLogObject {\n  /**\n   * Allows additional custom properties to be set on the log object.\n   * These properties will be captured as log attributes with a 'consola.' prefix.\n   *\n   * @example\n   * ```ts\n   * const reporter = Sentry.createConsolaReporter();\n   * reporter.log({\n   *   type: 'info',\n   *   message: 'User action',\n   *   userId: 123,\n   *   sessionId: 'abc-123'\n   * });\n   * // Will create attributes: consola.userId and consola.sessionId\n   * ```\n   */\n  [key: string]: unknown;\n\n  /**\n   * The numeric log level (0-5) or null.\n   *\n   * Consola log levels:\n   * - 0: Fatal and Error\n   * - 1: Warnings\n   * - 2: Normal logs\n   * - 3: Informational logs, success, fail, ready, start, box, ...\n   * - 4: Debug logs\n   * - 5: Trace logs\n   * - null: Some special types like 'verbose'\n   *\n   * See: https://github.com/unjs/consola/blob/main/README.md#log-level\n   */\n  level?: number | null;\n\n  /**\n   * The log type/method name (e.g., 'error', 'warn', 'info', 'debug', 'trace', 'success', 'fail', etc.).\n   *\n   * Consola built-in types include:\n   * - Standard: silent, fatal, error, warn, log, info, success, fail, ready, start, box, debug, trace, verbose\n   * - Custom types can also be defined\n   *\n   * See: https://github.com/unjs/consola/blob/main/README.md#log-types\n   */\n  type?: string;\n\n  /**\n   * An optional tag/scope for the log entry.\n   *\n   * Tags are created using `consola.withTag('scope')` and help categorize logs.\n   *\n   * @example\n   * ```ts\n   * const scopedLogger = consola.withTag('auth');\n   * scopedLogger.info('User logged in'); // tag will be 'auth'\n   * ```\n   *\n   * See: https://github.com/unjs/consola/blob/main/README.md#withtagtag\n   */\n  tag?: string;\n\n  /**\n   * The raw arguments passed to the log method.\n   *\n   * When `message` is not provided, these args are typically formatted into the final message.\n   *\n   * @example\n   * ```ts\n   * consola.info('Hello', 'world', { user: 'john' });\n   * // args = ['Hello', 'world', { user: 'john' }]\n   * ```\n   */\n  args?: unknown[];\n\n  /**\n   * The timestamp when the log was created.\n   *\n   * This is automatically set by Consola when the log is created.\n   */\n  date?: Date;\n\n  /**\n   * The formatted log message.\n   *\n   * When provided, this is the final formatted message. When not provided,\n   * the message should be constructed from the `args` array.\n   */\n  message?: string;\n}\n\nconst DEFAULT_CAPTURED_LEVELS: Array<LogSeverityLevel> = ['trace', 'debug', 'info', 'warn', 'error', 'fatal'];\n\n/**\n * Creates a new Sentry reporter for Consola that forwards logs to Sentry. Requires the `enableLogs` option to be enabled.\n *\n * **Note: This integration supports Consola v3.x only.** The reporter interface and log object structure\n * may differ in other versions of Consola.\n *\n * @param options - Configuration options for the reporter.\n * @returns A Consola reporter that can be added to consola instances.\n *\n * @example\n * ```ts\n * import * as Sentry from '@sentry/node';\n * import { consola } from 'consola';\n *\n * Sentry.init({\n *   enableLogs: true,\n * });\n *\n * const sentryReporter = Sentry.createConsolaReporter({\n *   // Optional: filter levels to capture\n *   levels: ['error', 'warn', 'info'],\n * });\n *\n * consola.addReporter(sentryReporter);\n *\n * // Now consola logs will be captured by Sentry\n * consola.info('This will be sent to Sentry');\n * consola.error('This error will also be sent to Sentry');\n * ```\n */\nexport function createConsolaReporter(options: ConsolaReporterOptions = {}): ConsolaReporter {\n  const levels = new Set(options.levels ?? DEFAULT_CAPTURED_LEVELS);\n  const providedClient = options.client;\n\n  return {\n    log(logObj: ConsolaLogObject) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { type, level, message: consolaMessage, args, tag, date: _date, ...attributes } = logObj;\n\n      // Get client - use provided client or current client\n      const client = providedClient || getClient();\n      if (!client) {\n        return;\n      }\n\n      // Determine the log severity level\n      const logSeverityLevel = getLogSeverityLevel(type, level);\n\n      // Early exit if this level should not be captured\n      if (!levels.has(logSeverityLevel)) {\n        return;\n      }\n\n      const { normalizeDepth = 3, normalizeMaxBreadth = 1_000 } = client.getOptions();\n\n      // Format the log message using the same approach as consola's basic reporter\n      const messageParts = [];\n      if (consolaMessage) {\n        messageParts.push(consolaMessage);\n      }\n      if (args && args.length > 0) {\n        messageParts.push(formatConsoleArgs(args, normalizeDepth, normalizeMaxBreadth));\n      }\n      const message = messageParts.join(' ');\n\n      // Build attributes\n      attributes['sentry.origin'] = 'auto.log.consola';\n\n      if (tag) {\n        attributes['consola.tag'] = tag;\n      }\n\n      if (type) {\n        attributes['consola.type'] = type;\n      }\n\n      // Only add level if it's a valid number (not null/undefined)\n      if (level != null && typeof level === 'number') {\n        attributes['consola.level'] = level;\n      }\n\n      _INTERNAL_captureLog({\n        level: logSeverityLevel,\n        message,\n        attributes,\n      });\n    },\n  };\n}\n\n// Mapping from consola log types to Sentry log severity levels\nconst CONSOLA_TYPE_TO_LOG_SEVERITY_LEVEL_MAP: Record<string, LogSeverityLevel> = {\n  // Consola built-in types\n  silent: 'trace',\n  fatal: 'fatal',\n  error: 'error',\n  warn: 'warn',\n  log: 'info',\n  info: 'info',\n  success: 'info',\n  fail: 'error',\n  ready: 'info',\n  start: 'info',\n  box: 'info',\n  debug: 'debug',\n  trace: 'trace',\n  verbose: 'debug',\n  // Custom types that might exist\n  critical: 'fatal',\n  notice: 'info',\n};\n\n// Mapping from consola log levels (numbers) to Sentry log severity levels\nconst CONSOLA_LEVEL_TO_LOG_SEVERITY_LEVEL_MAP: Record<number, LogSeverityLevel> = {\n  0: 'fatal', // Fatal and Error\n  1: 'warn', // Warnings\n  2: 'info', // Normal logs\n  3: 'info', // Informational logs, success, fail, ready, start, ...\n  4: 'debug', // Debug logs\n  5: 'trace', // Trace logs\n};\n\n/**\n * Determines the log severity level from Consola type and level.\n *\n * @param type - The Consola log type (e.g., 'error', 'warn', 'info')\n * @param level - The Consola numeric log level (0-5) or null for some types like 'verbose'\n * @returns The corresponding Sentry log severity level\n */\nfunction getLogSeverityLevel(type?: string, level?: number | null): LogSeverityLevel {\n  // Handle special case for verbose logs (level can be null with infinite level in Consola)\n  if (type === 'verbose') {\n    return 'debug';\n  }\n\n  // Handle silent logs - these should be at trace level\n  if (type === 'silent') {\n    return 'trace';\n  }\n\n  // First try to map by type (more specific)\n  if (type) {\n    const mappedLevel = CONSOLA_TYPE_TO_LOG_SEVERITY_LEVEL_MAP[type];\n    if (mappedLevel) {\n      return mappedLevel;\n    }\n  }\n\n  // Fallback to level mapping (handle null level)\n  if (typeof level === 'number') {\n    const mappedLevel = CONSOLA_LEVEL_TO_LOG_SEVERITY_LEVEL_MAP[level];\n    if (mappedLevel) {\n      return mappedLevel;\n    }\n  }\n\n  // Default fallback\n  return 'info';\n}\n"],"names":["getClient","formatConsoleArgs","_INTERNAL_captureLog"],"mappings":"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"}