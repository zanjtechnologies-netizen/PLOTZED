{"version":3,"file":"transport.js","sources":["../../../../src/integrations/mcp-server/transport.ts"],"sourcesContent":["/**\n * Transport layer instrumentation for MCP server\n *\n * Handles message interception and response correlation.\n * @see https://modelcontextprotocol.io/specification/2025-06-18/basic/transports\n */\n\nimport { getIsolationScope, withIsolationScope } from '../../currentScopes';\nimport { startInactiveSpan, withActiveSpan } from '../../tracing';\nimport { fill } from '../../utils/object';\nimport { cleanupPendingSpansForTransport, completeSpanWithResults, storeSpanForRequest } from './correlation';\nimport { captureError } from './errorCapture';\nimport { extractSessionDataFromInitializeRequest, extractSessionDataFromInitializeResponse } from './sessionExtraction';\nimport {\n  cleanupSessionDataForTransport,\n  storeSessionDataForTransport,\n  updateSessionDataForTransport,\n} from './sessionManagement';\nimport { buildMcpServerSpanConfig, createMcpNotificationSpan, createMcpOutgoingNotificationSpan } from './spans';\nimport type { ExtraHandlerData, MCPTransport } from './types';\nimport { isJsonRpcNotification, isJsonRpcRequest, isJsonRpcResponse, isValidContentItem } from './validation';\n\n/**\n * Wraps transport.onmessage to create spans for incoming messages.\n * For \"initialize\" requests, extracts and stores client info and protocol version\n * in the session data for the transport.\n * @param transport - MCP transport instance to wrap\n */\nexport function wrapTransportOnMessage(transport: MCPTransport): void {\n  if (transport.onmessage) {\n    fill(transport, 'onmessage', originalOnMessage => {\n      return function (this: MCPTransport, message: unknown, extra?: unknown) {\n        if (isJsonRpcRequest(message)) {\n          if (message.method === 'initialize') {\n            try {\n              const sessionData = extractSessionDataFromInitializeRequest(message);\n              storeSessionDataForTransport(this, sessionData);\n            } catch {\n              // noop\n            }\n          }\n\n          const isolationScope = getIsolationScope().clone();\n\n          return withIsolationScope(isolationScope, () => {\n            const spanConfig = buildMcpServerSpanConfig(message, this, extra as ExtraHandlerData);\n            const span = startInactiveSpan(spanConfig);\n\n            storeSpanForRequest(this, message.id, span, message.method);\n\n            return withActiveSpan(span, () => {\n              return (originalOnMessage as (...args: unknown[]) => unknown).call(this, message, extra);\n            });\n          });\n        }\n\n        if (isJsonRpcNotification(message)) {\n          return createMcpNotificationSpan(message, this, extra as ExtraHandlerData, () => {\n            return (originalOnMessage as (...args: unknown[]) => unknown).call(this, message, extra);\n          });\n        }\n\n        return (originalOnMessage as (...args: unknown[]) => unknown).call(this, message, extra);\n      };\n    });\n  }\n}\n\n/**\n * Wraps transport.send to handle outgoing messages and response correlation.\n * For \"initialize\" responses, extracts and stores protocol version and server info\n * in the session data for the transport.\n * @param transport - MCP transport instance to wrap\n */\nexport function wrapTransportSend(transport: MCPTransport): void {\n  if (transport.send) {\n    fill(transport, 'send', originalSend => {\n      return async function (this: MCPTransport, ...args: unknown[]) {\n        const [message] = args;\n\n        if (isJsonRpcNotification(message)) {\n          return createMcpOutgoingNotificationSpan(message, this, () => {\n            return (originalSend as (...args: unknown[]) => unknown).call(this, ...args);\n          });\n        }\n\n        if (isJsonRpcResponse(message)) {\n          if (message.id !== null && message.id !== undefined) {\n            if (message.error) {\n              captureJsonRpcErrorResponse(message.error);\n            }\n\n            if (isValidContentItem(message.result)) {\n              if (message.result.protocolVersion || message.result.serverInfo) {\n                try {\n                  const serverData = extractSessionDataFromInitializeResponse(message.result);\n                  updateSessionDataForTransport(this, serverData);\n                } catch {\n                  // noop\n                }\n              }\n            }\n\n            completeSpanWithResults(this, message.id, message.result);\n          }\n        }\n\n        return (originalSend as (...args: unknown[]) => unknown).call(this, ...args);\n      };\n    });\n  }\n}\n\n/**\n * Wraps transport.onclose to clean up pending spans for this transport only\n * @param transport - MCP transport instance to wrap\n */\nexport function wrapTransportOnClose(transport: MCPTransport): void {\n  if (transport.onclose) {\n    fill(transport, 'onclose', originalOnClose => {\n      return function (this: MCPTransport, ...args: unknown[]) {\n        cleanupPendingSpansForTransport(this);\n        cleanupSessionDataForTransport(this);\n        return (originalOnClose as (...args: unknown[]) => unknown).call(this, ...args);\n      };\n    });\n  }\n}\n\n/**\n * Wraps transport error handlers to capture connection errors\n * @param transport - MCP transport instance to wrap\n */\nexport function wrapTransportError(transport: MCPTransport): void {\n  if (transport.onerror) {\n    fill(transport, 'onerror', (originalOnError: (error: Error) => void) => {\n      return function (this: MCPTransport, error: Error) {\n        captureTransportError(error);\n        return originalOnError.call(this, error);\n      };\n    });\n  }\n}\n\n/**\n * Captures JSON-RPC error responses for server-side errors.\n * @see https://www.jsonrpc.org/specification#error_object\n * @internal\n * @param errorResponse - JSON-RPC error response\n */\nfunction captureJsonRpcErrorResponse(errorResponse: unknown): void {\n  try {\n    if (errorResponse && typeof errorResponse === 'object' && 'code' in errorResponse && 'message' in errorResponse) {\n      const jsonRpcError = errorResponse as { code: number; message: string; data?: unknown };\n\n      const isServerError =\n        jsonRpcError.code === -32603 || (jsonRpcError.code >= -32099 && jsonRpcError.code <= -32000);\n\n      if (isServerError) {\n        const error = new Error(jsonRpcError.message);\n        error.name = `JsonRpcError_${jsonRpcError.code}`;\n\n        captureError(error, 'protocol');\n      }\n    }\n  } catch {\n    // noop\n  }\n}\n\n/**\n * Captures transport connection errors\n * @internal\n * @param error - Transport error\n */\nfunction captureTransportError(error: Error): void {\n  try {\n    captureError(error, 'transport');\n  } catch {\n    // noop\n  }\n}\n"],"names":["fill","isJsonRpcRequest","extractSessionDataFromInitializeRequest","storeSessionDataForTransport","getIsolationScope","withIsolationScope","buildMcpServerSpanConfig","startInactiveSpan","storeSpanForRequest","withActiveSpan","isJsonRpcNotification","createMcpNotificationSpan","createMcpOutgoingNotificationSpan","isJsonRpcResponse","isValidContentItem","extractSessionDataFromInitializeResponse","updateSessionDataForTransport","completeSpanWithResults","cleanupPendingSpansForTransport","cleanupSessionDataForTransport","captureError"],"mappings":"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"}