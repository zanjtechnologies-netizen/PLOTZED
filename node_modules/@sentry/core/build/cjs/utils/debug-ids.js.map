{"version":3,"file":"debug-ids.js","sources":["../../../src/utils/debug-ids.ts"],"sourcesContent":["import type { DebugImage } from '../types-hoist/debugMeta';\nimport type { StackParser } from '../types-hoist/stacktrace';\nimport { GLOBAL_OBJ } from './worldwide';\n\ntype StackString = string;\ntype CachedResult = [string, string];\n\nlet parsedStackResults: Record<StackString, CachedResult> | undefined;\nlet lastSentryKeysCount: number | undefined;\nlet lastNativeKeysCount: number | undefined;\nlet cachedFilenameDebugIds: Record<string, string> | undefined;\n\n/**\n * Returns a map of filenames to debug identifiers.\n * Supports both proprietary _sentryDebugIds and native _debugIds (e.g., from Vercel) formats.\n */\nexport function getFilenameToDebugIdMap(stackParser: StackParser): Record<string, string> {\n  const sentryDebugIdMap = GLOBAL_OBJ._sentryDebugIds;\n  const nativeDebugIdMap = GLOBAL_OBJ._debugIds;\n\n  if (!sentryDebugIdMap && !nativeDebugIdMap) {\n    return {};\n  }\n\n  const sentryDebugIdKeys = sentryDebugIdMap ? Object.keys(sentryDebugIdMap) : [];\n  const nativeDebugIdKeys = nativeDebugIdMap ? Object.keys(nativeDebugIdMap) : [];\n\n  // If the count of registered globals hasn't changed since the last call, we\n  // can just return the cached result.\n  if (\n    cachedFilenameDebugIds &&\n    sentryDebugIdKeys.length === lastSentryKeysCount &&\n    nativeDebugIdKeys.length === lastNativeKeysCount\n  ) {\n    return cachedFilenameDebugIds;\n  }\n\n  lastSentryKeysCount = sentryDebugIdKeys.length;\n  lastNativeKeysCount = nativeDebugIdKeys.length;\n\n  // Build a map of filename -> debug_id from both sources\n  cachedFilenameDebugIds = {};\n\n  if (!parsedStackResults) {\n    parsedStackResults = {};\n  }\n\n  const processDebugIds = (debugIdKeys: string[], debugIdMap: Record<string, string>): void => {\n    for (const key of debugIdKeys) {\n      const debugId = debugIdMap[key];\n      const result = parsedStackResults?.[key];\n\n      if (result && cachedFilenameDebugIds && debugId) {\n        // Use cached filename but update with current debug ID\n        cachedFilenameDebugIds[result[0]] = debugId;\n        // Update cached result with new debug ID\n        if (parsedStackResults) {\n          parsedStackResults[key] = [result[0], debugId];\n        }\n      } else if (debugId) {\n        const parsedStack = stackParser(key);\n\n        for (let i = parsedStack.length - 1; i >= 0; i--) {\n          const stackFrame = parsedStack[i];\n          const filename = stackFrame?.filename;\n\n          if (filename && cachedFilenameDebugIds && parsedStackResults) {\n            cachedFilenameDebugIds[filename] = debugId;\n            parsedStackResults[key] = [filename, debugId];\n            break;\n          }\n        }\n      }\n    }\n  };\n\n  if (sentryDebugIdMap) {\n    processDebugIds(sentryDebugIdKeys, sentryDebugIdMap);\n  }\n\n  // Native _debugIds will override _sentryDebugIds if same file\n  if (nativeDebugIdMap) {\n    processDebugIds(nativeDebugIdKeys, nativeDebugIdMap);\n  }\n\n  return cachedFilenameDebugIds;\n}\n\n/**\n * Returns a list of debug images for the given resources.\n */\nexport function getDebugImagesForResources(\n  stackParser: StackParser,\n  resource_paths: ReadonlyArray<string>,\n): DebugImage[] {\n  const filenameDebugIdMap = getFilenameToDebugIdMap(stackParser);\n\n  if (!filenameDebugIdMap) {\n    return [];\n  }\n\n  const images: DebugImage[] = [];\n  for (const path of resource_paths) {\n    if (path && filenameDebugIdMap[path]) {\n      images.push({\n        type: 'sourcemap',\n        code_file: path,\n        debug_id: filenameDebugIdMap[path],\n      });\n    }\n  }\n\n  return images;\n}\n"],"names":["GLOBAL_OBJ"],"mappings":"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"}