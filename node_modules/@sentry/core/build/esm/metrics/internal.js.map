{"version":3,"file":"internal.js","sources":["../../../src/metrics/internal.ts"],"sourcesContent":["import { getGlobalSingleton } from '../carrier';\nimport type { Client } from '../client';\nimport { getClient, getCurrentScope, getGlobalScope, getIsolationScope } from '../currentScopes';\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { Scope, ScopeData } from '../scope';\nimport type { Integration } from '../types-hoist/integration';\nimport type { Metric, SerializedMetric, SerializedMetricAttributeValue } from '../types-hoist/metric';\nimport { mergeScopeData } from '../utils/applyScopeDataToEvent';\nimport { debug } from '../utils/debug-logger';\nimport { _getSpanForScope } from '../utils/spanOnScope';\nimport { timestampInSeconds } from '../utils/time';\nimport { _getTraceInfoFromScope } from '../utils/trace-info';\nimport { createMetricEnvelope } from './envelope';\n\nconst MAX_METRIC_BUFFER_SIZE = 100;\n\n/**\n * Converts a metric attribute to a serialized metric attribute.\n *\n * @param value - The value of the metric attribute.\n * @returns The serialized metric attribute.\n */\nexport function metricAttributeToSerializedMetricAttribute(value: unknown): SerializedMetricAttributeValue {\n  switch (typeof value) {\n    case 'number':\n      if (Number.isInteger(value)) {\n        return {\n          value,\n          type: 'integer',\n        };\n      }\n      return {\n        value,\n        type: 'double',\n      };\n    case 'boolean':\n      return {\n        value,\n        type: 'boolean',\n      };\n    case 'string':\n      return {\n        value,\n        type: 'string',\n      };\n    default: {\n      let stringValue = '';\n      try {\n        stringValue = JSON.stringify(value) ?? '';\n      } catch {\n        // Do nothing\n      }\n      return {\n        value: stringValue,\n        type: 'string',\n      };\n    }\n  }\n}\n\n/**\n * Sets a metric attribute if the value exists and the attribute key is not already present.\n *\n * @param metricAttributes - The metric attributes object to modify.\n * @param key - The attribute key to set.\n * @param value - The value to set (only sets if truthy and key not present).\n * @param setEvenIfPresent - Whether to set the attribute if it is present. Defaults to true.\n */\nfunction setMetricAttribute(\n  metricAttributes: Record<string, unknown>,\n  key: string,\n  value: unknown,\n  setEvenIfPresent = true,\n): void {\n  if (value && (setEvenIfPresent || !(key in metricAttributes))) {\n    metricAttributes[key] = value;\n  }\n}\n\n/**\n * Captures a serialized metric event and adds it to the metric buffer for the given client.\n *\n * @param client - A client. Uses the current client if not provided.\n * @param serializedMetric - The serialized metric event to capture.\n *\n * @experimental This method will experience breaking changes. This is not yet part of\n * the stable Sentry SDK API and can be changed or removed without warning.\n */\nexport function _INTERNAL_captureSerializedMetric(client: Client, serializedMetric: SerializedMetric): void {\n  const bufferMap = _getBufferMap();\n\n  const metricBuffer = _INTERNAL_getMetricBuffer(client);\n  if (metricBuffer === undefined) {\n    bufferMap.set(client, [serializedMetric]);\n  } else {\n    bufferMap.set(client, [...metricBuffer, serializedMetric]);\n    if (metricBuffer.length >= MAX_METRIC_BUFFER_SIZE) {\n      _INTERNAL_flushMetricsBuffer(client, metricBuffer);\n    }\n  }\n}\n\n/**\n * Options for capturing a metric internally.\n */\nexport interface InternalCaptureMetricOptions {\n  /**\n   * The scope to capture the metric with.\n   */\n  scope?: Scope;\n\n  /**\n   * A function to capture the serialized metric.\n   */\n  captureSerializedMetric?: (client: Client, metric: SerializedMetric) => void;\n}\n\n/**\n * Captures a metric event and sends it to Sentry.\n *\n * @param metric - The metric event to capture.\n * @param options - Options for capturing the metric.\n *\n * @experimental This method will experience breaking changes. This is not yet part of\n * the stable Sentry SDK API and can be changed or removed without warning.\n */\nexport function _INTERNAL_captureMetric(beforeMetric: Metric, options?: InternalCaptureMetricOptions): void {\n  const currentScope = options?.scope ?? getCurrentScope();\n  const captureSerializedMetric = options?.captureSerializedMetric ?? _INTERNAL_captureSerializedMetric;\n  const client = currentScope?.getClient() ?? getClient();\n  if (!client) {\n    DEBUG_BUILD && debug.warn('No client available to capture metric.');\n    return;\n  }\n\n  const { release, environment, _experiments } = client.getOptions();\n  if (!_experiments?.enableMetrics) {\n    DEBUG_BUILD && debug.warn('metrics option not enabled, metric will not be captured.');\n    return;\n  }\n\n  const [, traceContext] = _getTraceInfoFromScope(client, currentScope);\n\n  const processedMetricAttributes = {\n    ...beforeMetric.attributes,\n  };\n\n  const {\n    user: { id, email, username },\n  } = getMergedScopeData(currentScope);\n  setMetricAttribute(processedMetricAttributes, 'user.id', id, false);\n  setMetricAttribute(processedMetricAttributes, 'user.email', email, false);\n  setMetricAttribute(processedMetricAttributes, 'user.name', username, false);\n\n  setMetricAttribute(processedMetricAttributes, 'sentry.release', release);\n  setMetricAttribute(processedMetricAttributes, 'sentry.environment', environment);\n\n  const { name, version } = client.getSdkMetadata()?.sdk ?? {};\n  setMetricAttribute(processedMetricAttributes, 'sentry.sdk.name', name);\n  setMetricAttribute(processedMetricAttributes, 'sentry.sdk.version', version);\n\n  const replay = client.getIntegrationByName<\n    Integration & {\n      getReplayId: (onlyIfSampled?: boolean) => string;\n      getRecordingMode: () => 'session' | 'buffer' | undefined;\n    }\n  >('Replay');\n\n  const replayId = replay?.getReplayId(true);\n\n  setMetricAttribute(processedMetricAttributes, 'sentry.replay_id', replayId);\n\n  if (replayId && replay?.getRecordingMode() === 'buffer') {\n    // We send this so we can identify cases where the replayId is attached but the replay itself might not have been sent to Sentry\n    setMetricAttribute(processedMetricAttributes, 'sentry._internal.replay_is_buffering', true);\n  }\n\n  const metric: Metric = {\n    ...beforeMetric,\n    attributes: processedMetricAttributes,\n  };\n\n  // Run beforeSendMetric callback\n  const processedMetric = _experiments?.beforeSendMetric ? _experiments.beforeSendMetric(metric) : metric;\n\n  if (!processedMetric) {\n    DEBUG_BUILD && debug.log('`beforeSendMetric` returned `null`, will not send metric.');\n    return;\n  }\n\n  const serializedAttributes: Record<string, SerializedMetricAttributeValue> = {};\n  for (const key in processedMetric.attributes) {\n    if (processedMetric.attributes[key] !== undefined) {\n      serializedAttributes[key] = metricAttributeToSerializedMetricAttribute(processedMetric.attributes[key]);\n    }\n  }\n\n  const span = _getSpanForScope(currentScope);\n  const traceId = span ? span.spanContext().traceId : traceContext?.trace_id;\n  const spanId = span ? span.spanContext().spanId : undefined;\n\n  const serializedMetric: SerializedMetric = {\n    timestamp: timestampInSeconds(),\n    trace_id: traceId,\n    span_id: spanId,\n    name: processedMetric.name,\n    type: processedMetric.type,\n    unit: processedMetric.unit,\n    value: processedMetric.value,\n    attributes: serializedAttributes,\n  };\n\n  DEBUG_BUILD && debug.log('[Metric]', serializedMetric);\n\n  captureSerializedMetric(client, serializedMetric);\n\n  client.emit('afterCaptureMetric', metric);\n}\n\n/**\n * Flushes the metrics buffer to Sentry.\n *\n * @param client - A client.\n * @param maybeMetricBuffer - A metric buffer. Uses the metric buffer for the given client if not provided.\n *\n * @experimental This method will experience breaking changes. This is not yet part of\n * the stable Sentry SDK API and can be changed or removed without warning.\n */\nexport function _INTERNAL_flushMetricsBuffer(client: Client, maybeMetricBuffer?: Array<SerializedMetric>): void {\n  const metricBuffer = maybeMetricBuffer ?? _INTERNAL_getMetricBuffer(client) ?? [];\n  if (metricBuffer.length === 0) {\n    return;\n  }\n\n  const clientOptions = client.getOptions();\n  const envelope = createMetricEnvelope(metricBuffer, clientOptions._metadata, clientOptions.tunnel, client.getDsn());\n\n  // Clear the metric buffer after envelopes have been constructed.\n  _getBufferMap().set(client, []);\n\n  client.emit('flushMetrics');\n\n  // sendEnvelope should not throw\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  client.sendEnvelope(envelope);\n}\n\n/**\n * Returns the metric buffer for a given client.\n *\n * Exported for testing purposes.\n *\n * @param client - The client to get the metric buffer for.\n * @returns The metric buffer for the given client.\n */\nexport function _INTERNAL_getMetricBuffer(client: Client): Array<SerializedMetric> | undefined {\n  return _getBufferMap().get(client);\n}\n\n/**\n * Get the scope data for the current scope after merging with the\n * global scope and isolation scope.\n *\n * @param currentScope - The current scope.\n * @returns The scope data.\n */\nfunction getMergedScopeData(currentScope: Scope): ScopeData {\n  const scopeData = getGlobalScope().getScopeData();\n  mergeScopeData(scopeData, getIsolationScope().getScopeData());\n  mergeScopeData(scopeData, currentScope.getScopeData());\n  return scopeData;\n}\n\nfunction _getBufferMap(): WeakMap<Client, Array<SerializedMetric>> {\n  // The reference to the Client <> MetricBuffer map is stored on the carrier to ensure it's always the same\n  return getGlobalSingleton('clientToMetricBufferMap', () => new WeakMap<Client, Array<SerializedMetric>>());\n}\n"],"names":[],"mappings":"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"}