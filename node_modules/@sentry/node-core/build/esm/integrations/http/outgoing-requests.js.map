{"version":3,"file":"outgoing-requests.js","sources":["../../../../src/integrations/http/outgoing-requests.ts"],"sourcesContent":["import type { LRUMap, SanitizedRequestData } from '@sentry/core';\nimport {\n  addBreadcrumb,\n  debug,\n  getBreadcrumbLogLevelFromHttpStatusCode,\n  getClient,\n  getSanitizedUrlString,\n  getTraceData,\n  isError,\n  parseUrl,\n} from '@sentry/core';\nimport { shouldPropagateTraceForUrl } from '@sentry/opentelemetry';\nimport type { ClientRequest, IncomingMessage, RequestOptions } from 'http';\nimport { DEBUG_BUILD } from '../../debug-build';\nimport { mergeBaggageHeaders } from '../../utils/baggage';\nimport { INSTRUMENTATION_NAME } from './constants';\n\n/** Add a breadcrumb for outgoing requests. */\nexport function addRequestBreadcrumb(request: ClientRequest, response: IncomingMessage | undefined): void {\n  const data = getBreadcrumbData(request);\n\n  const statusCode = response?.statusCode;\n  const level = getBreadcrumbLogLevelFromHttpStatusCode(statusCode);\n\n  addBreadcrumb(\n    {\n      category: 'http',\n      data: {\n        status_code: statusCode,\n        ...data,\n      },\n      type: 'http',\n      level,\n    },\n    {\n      event: 'response',\n      request,\n      response,\n    },\n  );\n}\n\n/**\n * Add trace propagation headers to an outgoing request.\n * This must be called _before_ the request is sent!\n */\nexport function addTracePropagationHeadersToOutgoingRequest(\n  request: ClientRequest,\n  propagationDecisionMap: LRUMap<string, boolean>,\n): void {\n  const url = getRequestUrl(request);\n\n  // Manually add the trace headers, if it applies\n  // Note: We do not use `propagation.inject()` here, because our propagator relies on an active span\n  // Which we do not have in this case\n  const tracePropagationTargets = getClient()?.getOptions().tracePropagationTargets;\n  const headersToAdd = shouldPropagateTraceForUrl(url, tracePropagationTargets, propagationDecisionMap)\n    ? getTraceData()\n    : undefined;\n\n  if (!headersToAdd) {\n    return;\n  }\n\n  const { 'sentry-trace': sentryTrace, baggage } = headersToAdd;\n\n  // We do not want to overwrite existing header here, if it was already set\n  if (sentryTrace && !request.getHeader('sentry-trace')) {\n    try {\n      request.setHeader('sentry-trace', sentryTrace);\n      DEBUG_BUILD && debug.log(INSTRUMENTATION_NAME, 'Added sentry-trace header to outgoing request');\n    } catch (error) {\n      DEBUG_BUILD &&\n        debug.error(\n          INSTRUMENTATION_NAME,\n          'Failed to add sentry-trace header to outgoing request:',\n          isError(error) ? error.message : 'Unknown error',\n        );\n    }\n  }\n\n  if (baggage) {\n    // For baggage, we make sure to merge this into a possibly existing header\n    const newBaggage = mergeBaggageHeaders(request.getHeader('baggage'), baggage);\n    if (newBaggage) {\n      try {\n        request.setHeader('baggage', newBaggage);\n        DEBUG_BUILD && debug.log(INSTRUMENTATION_NAME, 'Added baggage header to outgoing request');\n      } catch (error) {\n        DEBUG_BUILD &&\n          debug.error(\n            INSTRUMENTATION_NAME,\n            'Failed to add baggage header to outgoing request:',\n            isError(error) ? error.message : 'Unknown error',\n          );\n      }\n    }\n  }\n}\n\nfunction getBreadcrumbData(request: ClientRequest): Partial<SanitizedRequestData> {\n  try {\n    // `request.host` does not contain the port, but the host header does\n    const host = request.getHeader('host') || request.host;\n    const url = new URL(request.path, `${request.protocol}//${host}`);\n    const parsedUrl = parseUrl(url.toString());\n\n    const data: Partial<SanitizedRequestData> = {\n      url: getSanitizedUrlString(parsedUrl),\n      'http.method': request.method || 'GET',\n    };\n\n    if (parsedUrl.search) {\n      data['http.query'] = parsedUrl.search;\n    }\n    if (parsedUrl.hash) {\n      data['http.fragment'] = parsedUrl.hash;\n    }\n\n    return data;\n  } catch {\n    return {};\n  }\n}\n\n/** Convert an outgoing request to request options. */\nexport function getRequestOptions(request: ClientRequest): RequestOptions {\n  return {\n    method: request.method,\n    protocol: request.protocol,\n    host: request.host,\n    hostname: request.host,\n    path: request.path,\n    headers: request.getHeaders(),\n  };\n}\n\nfunction getRequestUrl(request: ClientRequest): string {\n  const hostname = request.getHeader('host') || request.host;\n  const protocol = request.protocol;\n  const path = request.path;\n\n  return `${protocol}//${hostname}${path}`;\n}\n"],"names":[],"mappings":"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"}