{"version":3,"file":"systemError.js","sources":["../../../src/integrations/systemError.ts"],"sourcesContent":["import * as util from 'node:util';\nimport { defineIntegration } from '@sentry/core';\n\nconst INTEGRATION_NAME = 'NodeSystemError';\n\ntype SystemErrorContext = {\n  dest?: string; // If present, the file path destination when reporting a file system error\n  errno: number; // The system-provided error number\n  path?: string; // If present, the file path when reporting a file system error\n};\n\ntype SystemError = Error & SystemErrorContext;\n\nfunction isSystemError(error: unknown): error is SystemError {\n  if (!(error instanceof Error)) {\n    return false;\n  }\n\n  if (!('errno' in error) || typeof error.errno !== 'number') {\n    return false;\n  }\n\n  // Appears this is the recommended way to check for Node.js SystemError\n  // https://github.com/nodejs/node/issues/46869\n  return util.getSystemErrorMap().has(error.errno);\n}\n\ntype Options = {\n  /**\n   * If true, includes the `path` and `dest` properties in the error context.\n   */\n  includePaths?: boolean;\n};\n\n/**\n * Captures context for Node.js SystemError errors.\n */\nexport const systemErrorIntegration = defineIntegration((options: Options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    processEvent: (event, hint, client) => {\n      if (!isSystemError(hint.originalException)) {\n        return event;\n      }\n\n      const error = hint.originalException;\n\n      const errorContext: SystemErrorContext = {\n        ...error,\n      };\n\n      if (!client.getOptions().sendDefaultPii && options.includePaths !== true) {\n        delete errorContext.path;\n        delete errorContext.dest;\n      }\n\n      event.contexts = {\n        ...event.contexts,\n        node_system_error: errorContext,\n      };\n\n      for (const exception of event.exception?.values || []) {\n        if (exception.value) {\n          if (error.path && exception.value.includes(error.path)) {\n            exception.value = exception.value.replace(`'${error.path}'`, '').trim();\n          }\n          if (error.dest && exception.value.includes(error.dest)) {\n            exception.value = exception.value.replace(`'${error.dest}'`, '').trim();\n          }\n        }\n      }\n\n      return event;\n    },\n  };\n});\n"],"names":[],"mappings":";;;AAGA,MAAM,gBAAA,GAAmB,iBAAiB;;AAU1C,SAAS,aAAa,CAAC,KAAK,EAAiC;AAC7D,EAAE,IAAI,EAAE,iBAAiB,KAAK,CAAC,EAAE;AACjC,IAAI,OAAO,KAAK;AAChB;;AAEA,EAAE,IAAI,EAAE,WAAW,KAAK,CAAA,IAAK,OAAO,KAAK,CAAC,KAAA,KAAU,QAAQ,EAAE;AAC9D,IAAI,OAAO,KAAK;AAChB;;AAEA;AACA;AACA,EAAE,OAAO,IAAI,CAAC,iBAAiB,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC;AAClD;;AASA;AACA;AACA;AACO,MAAM,sBAAA,GAAyB,iBAAiB,CAAC,CAAC,OAAO,GAAY,EAAE,KAAK;AACnF,EAAE,OAAO;AACT,IAAI,IAAI,EAAE,gBAAgB;AAC1B,IAAI,YAAY,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,MAAM,KAAK;AAC3C,MAAM,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE;AAClD,QAAQ,OAAO,KAAK;AACpB;;AAEA,MAAM,MAAM,KAAA,GAAQ,IAAI,CAAC,iBAAiB;;AAE1C,MAAM,MAAM,YAAY,GAAuB;AAC/C,QAAQ,GAAG,KAAK;AAChB,OAAO;;AAEP,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,cAAA,IAAkB,OAAO,CAAC,YAAA,KAAiB,IAAI,EAAE;AAChF,QAAQ,OAAO,YAAY,CAAC,IAAI;AAChC,QAAQ,OAAO,YAAY,CAAC,IAAI;AAChC;;AAEA,MAAM,KAAK,CAAC,QAAA,GAAW;AACvB,QAAQ,GAAG,KAAK,CAAC,QAAQ;AACzB,QAAQ,iBAAiB,EAAE,YAAY;AACvC,OAAO;;AAEP,MAAM,KAAK,MAAM,SAAA,IAAa,KAAK,CAAC,SAAS,EAAE,MAAA,IAAU,EAAE,EAAE;AAC7D,QAAQ,IAAI,SAAS,CAAC,KAAK,EAAE;AAC7B,UAAU,IAAI,KAAK,CAAC,IAAA,IAAQ,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;AAClE,YAAY,SAAS,CAAC,KAAA,GAAQ,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE;AACnF;AACA,UAAU,IAAI,KAAK,CAAC,IAAA,IAAQ,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;AAClE,YAAY,SAAS,CAAC,KAAA,GAAQ,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE;AACnF;AACA;AACA;;AAEA,MAAM,OAAO,KAAK;AAClB,KAAK;AACL,GAAG;AACH,CAAC;;;;"}