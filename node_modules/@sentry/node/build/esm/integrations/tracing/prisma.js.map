{"version":3,"file":"prisma.js","sources":["../../../../src/integrations/tracing/prisma.ts"],"sourcesContent":["import type { Link, Tracer } from '@opentelemetry/api';\nimport { context, SpanKind, trace, TraceFlags } from '@opentelemetry/api';\nimport type { Instrumentation } from '@opentelemetry/instrumentation';\nimport type { IdGenerator } from '@opentelemetry/sdk-trace-base';\nimport { PrismaInstrumentation } from '@prisma/instrumentation';\nimport { consoleSandbox, defineIntegration, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, spanToJSON } from '@sentry/core';\nimport { generateInstrumentOnce } from '@sentry/node-core';\nimport type { PrismaV5TracingHelper } from './prisma/vendor/v5-tracing-helper';\nimport type { PrismaV6TracingHelper } from './prisma/vendor/v6-tracing-helper';\n\nconst INTEGRATION_NAME = 'Prisma';\n\ntype CompatibilityLayerTraceHelper = PrismaV5TracingHelper & PrismaV6TracingHelper;\n\n// Vendored in from @prisma/instrumentation v5:\ntype V5EngineSpanEvent = {\n  span: boolean;\n  spans: V5EngineSpan[];\n};\n\ntype V5EngineSpanKind = 'client' | 'internal';\n\ntype V5EngineSpan = {\n  span: boolean;\n  name: string;\n  trace_id: string;\n  span_id: string;\n  parent_span_id: string;\n  start_time: [number, number];\n  end_time: [number, number];\n  attributes?: Record<string, string>;\n  links?: { trace_id: string; span_id: string }[];\n  kind: V5EngineSpanKind;\n};\n\nfunction isPrismaV6TracingHelper(helper: unknown): helper is PrismaV6TracingHelper {\n  return !!helper && typeof helper === 'object' && 'dispatchEngineSpans' in helper;\n}\n\nfunction getPrismaTracingHelper(): unknown | undefined {\n  const prismaInstrumentationObject = (globalThis as Record<string, unknown>).PRISMA_INSTRUMENTATION;\n  const prismaTracingHelper =\n    prismaInstrumentationObject &&\n    typeof prismaInstrumentationObject === 'object' &&\n    'helper' in prismaInstrumentationObject\n      ? prismaInstrumentationObject.helper\n      : undefined;\n\n  return prismaTracingHelper;\n}\n\ntype TracerWithIdGenerator = Tracer & {\n  _idGenerator?: IdGenerator;\n};\n\ninterface PrismaOptions {\n  /**\n   * @deprecated This is no longer used, v5 works out of the box.\n   */\n  prismaInstrumentation?: Instrumentation;\n}\n\nclass SentryPrismaInteropInstrumentation extends PrismaInstrumentation {\n  public constructor() {\n    super();\n  }\n\n  public enable(): void {\n    super.enable();\n\n    // The PrismaIntegration (super class) defines a global variable `global[\"PRISMA_INSTRUMENTATION\"]` when `enable()` is called. This global variable holds a \"TracingHelper\" which Prisma uses internally to create tracing data. It's their way of not depending on OTEL with their main package. The sucky thing is, prisma broke the interface of the tracing helper with the v6 major update. This means that if you use Prisma 5 with the v6 instrumentation (or vice versa) Prisma just blows up, because tries to call methods on the helper that no longer exist.\n    // Because we actually want to use the v6 instrumentation and not blow up in Prisma 5 user's faces, what we're doing here is backfilling the v5 method (`createEngineSpan`) with a noop so that no longer crashes when it attempts to call that function.\n    const prismaTracingHelper = getPrismaTracingHelper();\n\n    if (isPrismaV6TracingHelper(prismaTracingHelper)) {\n      // Inspired & adjusted from https://github.com/prisma/prisma/tree/5.22.0/packages/instrumentation\n      (prismaTracingHelper as CompatibilityLayerTraceHelper).createEngineSpan = (\n        engineSpanEvent: V5EngineSpanEvent,\n      ) => {\n        const tracer = trace.getTracer('prismaV5Compatibility') as TracerWithIdGenerator;\n\n        // Prisma v5 relies on being able to create spans with a specific span & trace ID\n        // this is no longer possible in OTEL v2, there is no public API to do this anymore\n        // So in order to kind of hack this possibility, we rely on the internal `_idGenerator` property\n        // This is used to generate the random IDs, and we overwrite this temporarily to generate static IDs\n        // This is flawed and may not work, e.g. if the code is bundled and the private property is renamed\n        // in such cases, these spans will not be captured and some Prisma spans will be missing\n        const initialIdGenerator = tracer._idGenerator;\n\n        if (!initialIdGenerator) {\n          consoleSandbox(() => {\n            // eslint-disable-next-line no-console\n            console.warn(\n              '[Sentry] Could not find _idGenerator on tracer, skipping Prisma v5 compatibility - some Prisma spans may be missing!',\n            );\n          });\n\n          return;\n        }\n\n        try {\n          engineSpanEvent.spans.forEach(engineSpan => {\n            const kind = engineSpanKindToOTELSpanKind(engineSpan.kind);\n\n            const parentSpanId = engineSpan.parent_span_id;\n            const spanId = engineSpan.span_id;\n            const traceId = engineSpan.trace_id;\n\n            const links: Link[] | undefined = engineSpan.links?.map(link => {\n              return {\n                context: {\n                  traceId: link.trace_id,\n                  spanId: link.span_id,\n                  traceFlags: TraceFlags.SAMPLED,\n                },\n              };\n            });\n\n            const ctx = trace.setSpanContext(context.active(), {\n              traceId,\n              spanId: parentSpanId,\n              traceFlags: TraceFlags.SAMPLED,\n            });\n\n            context.with(ctx, () => {\n              const temporaryIdGenerator: IdGenerator = {\n                generateTraceId: () => {\n                  return traceId;\n                },\n                generateSpanId: () => {\n                  return spanId;\n                },\n              };\n\n              tracer._idGenerator = temporaryIdGenerator;\n\n              const span = tracer.startSpan(engineSpan.name, {\n                kind,\n                links,\n                startTime: engineSpan.start_time,\n                attributes: engineSpan.attributes,\n              });\n\n              span.end(engineSpan.end_time);\n\n              tracer._idGenerator = initialIdGenerator;\n            });\n          });\n        } finally {\n          // Ensure we always restore this at the end, even if something errors\n          tracer._idGenerator = initialIdGenerator;\n        }\n      };\n    }\n  }\n}\n\nfunction engineSpanKindToOTELSpanKind(engineSpanKind: V5EngineSpanKind): SpanKind {\n  switch (engineSpanKind) {\n    case 'client':\n      return SpanKind.CLIENT;\n    case 'internal':\n    default: // Other span kinds aren't currently supported\n      return SpanKind.INTERNAL;\n  }\n}\n\nexport const instrumentPrisma = generateInstrumentOnce<PrismaOptions>(INTEGRATION_NAME, _options => {\n  return new SentryPrismaInteropInstrumentation();\n});\n\n/**\n * Adds Sentry tracing instrumentation for the [prisma](https://www.npmjs.com/package/prisma) library.\n * For more information, see the [`prismaIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/prisma/).\n *\n * NOTE: By default, this integration works with Prisma version 6.\n * To get performance instrumentation for other Prisma versions,\n * 1. Install the `@prisma/instrumentation` package with the desired version.\n * 1. Pass a `new PrismaInstrumentation()` instance as exported from `@prisma/instrumentation` to the `prismaInstrumentation` option of this integration:\n *\n *    ```js\n *    import { PrismaInstrumentation } from '@prisma/instrumentation'\n *\n *    Sentry.init({\n *      integrations: [\n *        prismaIntegration({\n *          // Override the default instrumentation that Sentry uses\n *          prismaInstrumentation: new PrismaInstrumentation()\n *        })\n *      ]\n *    })\n *    ```\n *\n *    The passed instrumentation instance will override the default instrumentation instance the integration would use, while the `prismaIntegration` will still ensure data compatibility for the various Prisma versions.\n * 1. Depending on your Prisma version (prior to version 6), add `previewFeatures = [\"tracing\"]` to the client generator block of your Prisma schema:\n *\n *    ```\n *    generator client {\n *      provider = \"prisma-client-js\"\n *      previewFeatures = [\"tracing\"]\n *    }\n *    ```\n */\nexport const prismaIntegration = defineIntegration((_options?: PrismaOptions) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentPrisma();\n    },\n    setup(client) {\n      // If no tracing helper exists, we skip any work here\n      // this means that prisma is not being used\n      if (!getPrismaTracingHelper()) {\n        return;\n      }\n\n      client.on('spanStart', span => {\n        const spanJSON = spanToJSON(span);\n        if (spanJSON.description?.startsWith('prisma:')) {\n          span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.prisma');\n        }\n\n        // Make sure we use the query text as the span name, for ex. SELECT * FROM \"User\" WHERE \"id\" = $1\n        if (spanJSON.description === 'prisma:engine:db_query' && spanJSON.data['db.query.text']) {\n          span.updateName(spanJSON.data['db.query.text'] as string);\n        }\n\n        // In Prisma v5.22+, the `db.system` attribute is automatically set\n        // On older versions, this is missing, so we add it here\n        if (spanJSON.description === 'prisma:engine:db_query' && !spanJSON.data['db.system']) {\n          span.setAttribute('db.system', 'prisma');\n        }\n      });\n    },\n  };\n});\n"],"names":[],"mappings":"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"}