{"version":3,"file":"format.js","names":["_matchesEntirely","_interopRequireDefault","require","_formatNationalNumberUsingFormat","_metadata","_interopRequireWildcard","_getIddPrefix","_RFC","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","_typeof","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","DEFAULT_OPTIONS","formatExtension","formattedNumber","extension","metadata","concat","ext","formatNumber","input","format","options","merge","Metadata","country","hasCountry","Error","selectNumberingPlan","countryCallingCode","phone","nationalNumber","v2","number","formatNationalNumber","carrierCode","addExtension","formatRFC3966","fromCountry","formatIDD","formatAs","chooseFormatForNumber","formats","formatNationalNumberUsingFormat","useInternationalFormat","withNationalPrefix","nationalPrefixIsOptionalWhenFormattingInNationalFormat","nationalPrefix","availableFormats","pickFirstMatchingElement","leadingDigitsPatterns","length","lastLeadingDigitsPattern","search","matchesEntirely","pattern","fromCountryCallingCode","getCountryCallingCode","iddPrefix","getIddPrefix","undefined","_len","arguments","objects","Array","_key","key","elements","testFunction"],"sources":["../source/format.js"],"sourcesContent":["// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport matchesEntirely from './helpers/matchesEntirely.js'\r\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat.js'\r\nimport Metadata, { getCountryCallingCode } from './metadata.js'\r\nimport getIddPrefix from './helpers/getIddPrefix.js'\r\nimport { formatRFC3966 } from './helpers/RFC3966.js'\r\n\r\nconst DEFAULT_OPTIONS = {\r\n\tformatExtension: (formattedNumber, extension, metadata) => `${formattedNumber}${metadata.ext()}${extension}`\r\n}\r\n\r\n/**\r\n * Formats a phone number.\r\n *\r\n * format(phoneNumberInstance, 'INTERNATIONAL', { ..., v2: true }, metadata)\r\n * format(phoneNumberInstance, 'NATIONAL', { ..., v2: true }, metadata)\r\n *\r\n * format({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', { ... }, metadata)\r\n * format({ phone: '8005553535', country: 'RU' }, 'NATIONAL', undefined, metadata)\r\n *\r\n * @param  {object|PhoneNumber} input â€” If `options.v2: true` flag is passed, the `input` should be a `PhoneNumber` instance. Otherwise, it should be an object of shape `{ phone: '...', country: '...' }`.\r\n * @param  {string} format\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\r\nexport default function formatNumber(input, format, options, metadata) {\r\n\t// Apply default options.\r\n\tif (options) {\r\n\t\t// Using ES6 \"rest spread\" syntax here didn't work with `babel`/`istanbul`\r\n\t\t// for some weird reason: this line of code would cause the code coverage\r\n\t\t// to show as not 100%. That's because `babel`/`istanbul`, for some weird reason,\r\n\t\t// apparently doesn't know how to properly exclude Babel polyfills from code coverage.\r\n\t\t//\r\n\t\t// options = { ...DEFAULT_OPTIONS, ...options }\r\n\t\t//\r\n\t\toptions = merge({}, DEFAULT_OPTIONS, options)\r\n\t} else {\r\n\t\toptions = DEFAULT_OPTIONS\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (input.country && input.country !== '001') {\r\n\t\t// Validate `input.country`.\r\n\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t}\r\n\t\tmetadata.selectNumberingPlan(input.country)\r\n\t}\r\n\telse if (input.countryCallingCode) {\r\n\t\tmetadata.selectNumberingPlan(input.countryCallingCode)\r\n\t}\r\n\telse return input.phone || ''\r\n\r\n\tconst countryCallingCode = metadata.countryCallingCode()\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\r\n\t// This variable should have been declared inside `case`s\r\n\t// but Babel has a bug and it says \"duplicate variable declaration\".\r\n\tlet number\r\n\r\n\tswitch (format) {\r\n\t\tcase 'NATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t\tnumber = formatNationalNumber(nationalNumber, input.carrierCode, 'NATIONAL', metadata, options)\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'INTERNATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn `+${countryCallingCode}`\r\n\t\t\t}\r\n\t\t\tnumber = formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata, options)\r\n\t\t\tnumber = `+${countryCallingCode} ${number}`\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'E.164':\r\n\t\t\t// `E.164` doesn't define \"phone number extensions\".\r\n\t\t\treturn `+${countryCallingCode}${nationalNumber}`\r\n\r\n\t\tcase 'RFC3966':\r\n\t\t\treturn formatRFC3966({\r\n\t\t\t\tnumber: `+${countryCallingCode}${nationalNumber}`,\r\n\t\t\t\text: input.ext\r\n\t\t\t})\r\n\r\n\t\t// For reference, here's Google's IDD formatter:\r\n\t\t// https://github.com/google/libphonenumber/blob/32719cf74e68796788d1ca45abc85dcdc63ba5b9/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L1546\r\n\t\t// Not saying that this IDD formatter replicates it 1:1, but it seems to work.\r\n\t\t// Who would even need to format phone numbers in IDD format anyway?\r\n\t\tcase 'IDD':\r\n\t\t\tif (!options.fromCountry) {\r\n\t\t\t\treturn\r\n\t\t\t\t// throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\r\n\t\t\t}\r\n\t\t\tconst formattedNumber = formatIDD(\r\n\t\t\t\tnationalNumber,\r\n\t\t\t\tinput.carrierCode,\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\toptions.fromCountry,\r\n\t\t\t\tmetadata\r\n\t\t\t)\r\n\t\t\treturn addExtension(formattedNumber, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown \"format\" argument passed to \"formatNumber()\": \"${format}\"`)\r\n\t}\r\n}\r\n\r\nfunction formatNationalNumber(number, carrierCode, formatAs, metadata, options) {\r\n\tconst format = chooseFormatForNumber(metadata.formats(), number)\r\n\tif (!format) {\r\n\t\treturn number\r\n\t}\r\n\treturn formatNationalNumberUsingFormat(\r\n\t\tnumber,\r\n\t\tformat,\r\n\t\t{\r\n\t\t\tuseInternationalFormat: formatAs === 'INTERNATIONAL',\r\n\t\t\twithNationalPrefix: format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && (options && options.nationalPrefix === false) ? false : true,\r\n\t\t\tcarrierCode,\r\n\t\t\tmetadata\r\n\t\t}\r\n\t)\r\n}\r\n\r\nexport function chooseFormatForNumber(availableFormats, nationalNumber) {\r\n\t// Using a `for ... of` loop here didn't work with `babel`/`istanbul`:\r\n\t// for some weird reason, it showed code coverage less than 100%.\r\n\t// That's because `babel`/`istanbul`, for some weird reason,\r\n\t// apparently doesn't know how to properly exclude Babel polyfills from code coverage.\r\n\t//\r\n\t// for (const format of availableFormats) { ... }\r\n\t//\r\n\treturn pickFirstMatchingElement(availableFormats, (format) => {\r\n\t\t// Validate leading digits.\r\n\t\t// The test case for \"else path\" could be found by searching for\r\n\t\t// \"format.leadingDigitsPatterns().length === 0\".\r\n\t\tif (format.leadingDigitsPatterns().length > 0) {\r\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\r\n\t\t\tconst lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]\r\n\t\t\t// If leading digits don't match then move on to the next phone number format\r\n\t\t\tif (nationalNumber.search(lastLeadingDigitsPattern) !== 0) {\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Check that the national number matches the phone number format regular expression\r\n\t\treturn matchesEntirely(nationalNumber, format.pattern())\r\n\t})\r\n}\r\n\r\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\r\n\treturn ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber\r\n}\r\n\r\nfunction formatIDD(\r\n\tnationalNumber,\r\n\tcarrierCode,\r\n\tcountryCallingCode,\r\n\tfromCountry,\r\n\tmetadata\r\n) {\r\n\tconst fromCountryCallingCode = getCountryCallingCode(fromCountry, metadata.metadata)\r\n\t// When calling within the same country calling code.\r\n\tif (fromCountryCallingCode === countryCallingCode) {\r\n\t\tconst formattedNumber = formatNationalNumber(nationalNumber, carrierCode, 'NATIONAL', metadata)\r\n\t\t// For NANPA regions, return the national format for these regions\r\n\t\t// but prefix it with the country calling code.\r\n\t\tif (countryCallingCode === '1') {\r\n\t\t\treturn countryCallingCode + ' ' + formattedNumber\r\n\t\t}\r\n\t\t// If regions share a country calling code, the country calling code need\r\n\t\t// not be dialled. This also applies when dialling within a region, so this\r\n\t\t// if clause covers both these cases. Technically this is the case for\r\n\t\t// dialling from La Reunion to other overseas departments of France (French\r\n\t\t// Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\r\n\t\t// this edge case for now and for those cases return the version including\r\n\t\t// country calling code. Details here:\r\n\t\t// http://www.petitfute.com/voyage/225-info-pratiques-reunion\r\n\t\t//\r\n\t\treturn formattedNumber\r\n\t}\r\n\tconst iddPrefix = getIddPrefix(fromCountry, undefined, metadata.metadata)\r\n\tif (iddPrefix) {\r\n\t\treturn `${iddPrefix} ${countryCallingCode} ${formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata)}`\r\n\t}\r\n}\r\n\r\nfunction merge(...objects) {\r\n\tlet i = 1\r\n\twhile (i < objects.length) {\r\n\t\tif (objects[i]) {\r\n\t\t\tfor (const key in objects[i]) {\r\n\t\t\t\tobjects[0][key] = objects[i][key]\r\n\t\t\t}\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\treturn objects[0]\r\n}\r\n\r\nfunction pickFirstMatchingElement(elements, testFunction) {\r\n\tlet i = 0\r\n\twhile (i < elements.length) {\r\n\t\tif (testFunction(elements[i])) {\r\n\t\t\treturn elements[i]\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n}"],"mappings":"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","ignoreList":[]}