{"version":3,"file":"findPhoneNumbersInitialImplementation.js","names":["_createExtensionPattern","_interopRequireDefault","require","_PhoneNumberSearch","e","__esModule","EXTN_PATTERNS_FOR_PARSING","exports","createExtensionPattern","findPhoneNumbers","text","options","metadata","undefined","search","PhoneNumberSearch","phones","hasNext","push","next","searchPhoneNumbers","iterator","done","value","iterable","Symbol"],"sources":["../../source/legacy/findPhoneNumbersInitialImplementation.js"],"sourcesContent":["// This is a legacy function.\r\n// Use `findNumbers()` instead.\r\n\r\nimport createExtensionPattern from '../helpers/extension/createExtensionPattern.js'\r\n\r\nimport PhoneNumberSearch from './PhoneNumberSearch.js'\r\n\r\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\r\nexport const EXTN_PATTERNS_FOR_PARSING = createExtensionPattern('parsing')\r\n\r\n// // Regular expression for getting opening brackets for a valid number\r\n// // found using `PHONE_NUMBER_START_PATTERN` for prepending those brackets to the number.\r\n// const BEFORE_NUMBER_DIGITS_PUNCTUATION = new RegExp('[' + OPENING_BRACKETS + ']+' + '[' + WHITESPACE + ']*' + '$')\r\n\r\n// const VALID_PRECEDING_CHARACTER_PATTERN = /[^a-zA-Z0-9]/\r\n\r\nexport default function findPhoneNumbers(text, options, metadata) {\r\n\t/* istanbul ignore if */\r\n\tif (options === undefined) {\r\n\t\toptions = {}\r\n\t}\r\n\tconst search = new PhoneNumberSearch(text, options, metadata)\r\n\tconst phones = []\r\n\twhile (search.hasNext()) {\r\n\t\tphones.push(search.next())\r\n\t}\r\n\treturn phones\r\n}\r\n\r\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\r\nexport function searchPhoneNumbers(text, options, metadata) {\r\n\t/* istanbul ignore if */\r\n\tif (options === undefined) {\r\n\t\toptions = {}\r\n\t}\r\n\r\n\tconst search = new PhoneNumberSearch(text, options, metadata)\r\n\r\n\tconst iterator = () => {\r\n\t\treturn {\r\n\t\t\tnext: () => {\r\n\t\t\t\tif (search.hasNext()) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tdone: false,\r\n\t\t\t\t\t\tvalue: search.next()\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn {\r\n\t\t\t\t\tdone: true\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// This line of code didn't really work with `babel`/`istanbul`:\r\n\t// for some weird reason, it showed code coverage less than 100%.\r\n\t// That's because `babel`/`istanbul`, for some weird reason,\r\n\t// apparently doesn't know how to properly exclude Babel polyfills from code coverage.\r\n\t//\r\n\t// const iterable = { [Symbol.iterator]: iterator }\r\n\r\n\tconst iterable = {}\r\n\titerable[Symbol.iterator] = iterator\r\n\treturn iterable\r\n}\r\n"],"mappings":";;;;;;;;AAGA,IAAAA,uBAAA,GAAAC,sBAAA,CAAAC,OAAA;AAEA,IAAAC,kBAAA,GAAAF,sBAAA,CAAAC,OAAA;AAAsD,SAAAD,uBAAAG,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,gBAAAA,CAAA;AALtD;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAME,yBAAyB,GAAAC,OAAA,CAAAD,yBAAA,GAAG,IAAAE,kCAAsB,EAAC,SAAS,CAAC;;AAE1E;AACA;AACA;;AAEA;;AAEe,SAASC,gBAAgBA,CAACC,IAAI,EAAEC,OAAO,EAAEC,QAAQ,EAAE;EACjE;EACA,IAAID,OAAO,KAAKE,SAAS,EAAE;IAC1BF,OAAO,GAAG,CAAC,CAAC;EACb;EACA,IAAMG,MAAM,GAAG,IAAIC,6BAAiB,CAACL,IAAI,EAAEC,OAAO,EAAEC,QAAQ,CAAC;EAC7D,IAAMI,MAAM,GAAG,EAAE;EACjB,OAAOF,MAAM,CAACG,OAAO,CAAC,CAAC,EAAE;IACxBD,MAAM,CAACE,IAAI,CAACJ,MAAM,CAACK,IAAI,CAAC,CAAC,CAAC;EAC3B;EACA,OAAOH,MAAM;AACd;;AAEA;AACA;AACA;AACO,SAASI,kBAAkBA,CAACV,IAAI,EAAEC,OAAO,EAAEC,QAAQ,EAAE;EAC3D;EACA,IAAID,OAAO,KAAKE,SAAS,EAAE;IAC1BF,OAAO,GAAG,CAAC,CAAC;EACb;EAEA,IAAMG,MAAM,GAAG,IAAIC,6BAAiB,CAACL,IAAI,EAAEC,OAAO,EAAEC,QAAQ,CAAC;EAE7D,IAAMS,QAAQ,GAAG,SAAXA,QAAQA,CAAA,EAAS;IACtB,OAAO;MACNF,IAAI,EAAE,SAANA,IAAIA,CAAA,EAAQ;QACX,IAAIL,MAAM,CAACG,OAAO,CAAC,CAAC,EAAE;UACrB,OAAO;YACNK,IAAI,EAAE,KAAK;YACXC,KAAK,EAAET,MAAM,CAACK,IAAI,CAAC;UACpB,CAAC;QACF;QACA,OAAO;UACNG,IAAI,EAAE;QACP,CAAC;MACF;IACD,CAAC;EACF,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;;EAEA,IAAME,QAAQ,GAAG,CAAC,CAAC;EACnBA,QAAQ,CAACC,MAAM,CAACJ,QAAQ,CAAC,GAAGA,QAAQ;EACpC,OAAOG,QAAQ;AAChB","ignoreList":[]}