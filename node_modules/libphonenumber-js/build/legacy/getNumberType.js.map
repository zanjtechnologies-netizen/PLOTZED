{"version":3,"file":"getNumberType.js","names":["_isViablePhoneNumber","_interopRequireDefault","require","_getNumberType2","_isObject","_parse","e","__esModule","getNumberType","_normalizeArguments","normalizeArguments","arguments","input","options","metadata","phone","_getNumberType","args","arg_1","arg_2","arg_3","arg_4","isObject","isViablePhoneNumber","parse","defaultCountry","undefined","TypeError"],"sources":["../../source/legacy/getNumberType.js"],"sourcesContent":["import isViablePhoneNumber from '../helpers/isViablePhoneNumber.js'\r\nimport _getNumberType from '../helpers/getNumberType.js'\r\nimport isObject from '../helpers/isObject.js'\r\nimport parse from '../parse.js'\r\n\r\n// Finds out national phone number type (fixed line, mobile, etc)\r\nexport default function getNumberType() {\r\n\tconst { input, options, metadata } = normalizeArguments(arguments)\r\n\t// `parseNumber()` would return `{}` when no phone number could be parsed from the input.\r\n\tif (!input.phone) {\r\n\t\treturn\r\n\t}\r\n\treturn _getNumberType(input, options, metadata)\r\n}\r\n\r\n// Sort out arguments\r\nexport function normalizeArguments(args)\r\n{\r\n\t// This line of code appeared to not work correctly with `babel`/`istanbul`:\r\n\t// for some weird reason, it caused coverage less than 100%.\r\n\t// That's because `babel`/`istanbul`, for some weird reason,\r\n\t// apparently doesn't know how to properly exclude Babel polyfills from code coverage.\r\n\t//\r\n\t// const [arg_1, arg_2, arg_3, arg_4] = Array.prototype.slice.call(args)\r\n\r\n\tconst arg_1 = args[0]\r\n\tconst arg_2 = args[1]\r\n\tconst arg_3 = args[2]\r\n\tconst arg_4 = args[3]\r\n\r\n\tlet input\r\n\tlet options = {}\r\n\tlet metadata\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `getNumberType('88005553535', ...)`.\r\n\tif (typeof arg_1 === 'string')\r\n\t{\r\n\t\t// If \"default country\" argument is being passed\r\n\t\t// then convert it to an `options` object.\r\n\t\t// `getNumberType('88005553535', 'RU', metadata)`.\r\n\t\tif (!isObject(arg_2))\r\n\t\t{\r\n\t\t\tif (arg_4)\r\n\t\t\t{\r\n\t\t\t\toptions = arg_3\r\n\t\t\t\tmetadata = arg_4\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_3\r\n\t\t\t}\r\n\r\n\t\t\t// `parse` extracts phone numbers from raw text,\r\n\t\t\t// therefore it will cut off all \"garbage\" characters,\r\n\t\t\t// while this `validate` function needs to verify\r\n\t\t\t// that the phone number contains no \"garbage\"\r\n\t\t\t// therefore the explicit `isViablePhoneNumber` check.\r\n\t\t\tif (isViablePhoneNumber(arg_1))\r\n\t\t\t{\r\n\t\t\t\tinput = parse(arg_1, { defaultCountry: arg_2 }, metadata)\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tinput = {}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// No \"resrict country\" argument is being passed.\r\n\t\t// International phone number is passed.\r\n\t\t// `getNumberType('+78005553535', metadata)`.\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (arg_3)\r\n\t\t\t{\r\n\t\t\t\toptions = arg_2\r\n\t\t\t\tmetadata = arg_3\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_2\r\n\t\t\t}\r\n\r\n\t\t\t// `parse` extracts phone numbers from raw text,\r\n\t\t\t// therefore it will cut off all \"garbage\" characters,\r\n\t\t\t// while this `validate` function needs to verify\r\n\t\t\t// that the phone number contains no \"garbage\"\r\n\t\t\t// therefore the explicit `isViablePhoneNumber` check.\r\n\t\t\tif (isViablePhoneNumber(arg_1))\r\n\t\t\t{\r\n\t\t\t\tinput = parse(arg_1, undefined, metadata)\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tinput = {}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// If the phone number is passed as a parsed phone number.\r\n\t// `getNumberType({ phone: '88005553535', country: 'RU' }, ...)`.\r\n\telse if (isObject(arg_1))\r\n\t{\r\n\t\tinput = arg_1\r\n\r\n\t\tif (arg_3)\r\n\t\t{\r\n\t\t\toptions = arg_2\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tmetadata = arg_2\r\n\t\t}\r\n\t}\r\n\telse throw new TypeError('A phone number must either be a string or an object of shape { phone, [country] }.')\r\n\r\n\treturn {\r\n\t\tinput,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n}"],"mappings":";;;;;;;AAAA,IAAAA,oBAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,eAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,SAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,MAAA,GAAAJ,sBAAA,CAAAC,OAAA;AAA+B,SAAAD,uBAAAK,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,gBAAAA,CAAA;AAE/B;AACe,SAASE,aAAaA,CAAA,EAAG;EACvC,IAAAC,mBAAA,GAAqCC,kBAAkB,CAACC,SAAS,CAAC;IAA1DC,KAAK,GAAAH,mBAAA,CAALG,KAAK;IAAEC,OAAO,GAAAJ,mBAAA,CAAPI,OAAO;IAAEC,QAAQ,GAAAL,mBAAA,CAARK,QAAQ;EAChC;EACA,IAAI,CAACF,KAAK,CAACG,KAAK,EAAE;IACjB;EACD;EACA,OAAO,IAAAC,0BAAc,EAACJ,KAAK,EAAEC,OAAO,EAAEC,QAAQ,CAAC;AAChD;;AAEA;AACO,SAASJ,kBAAkBA,CAACO,IAAI,EACvC;EACC;EACA;EACA;EACA;EACA;EACA;;EAEA,IAAMC,KAAK,GAAGD,IAAI,CAAC,CAAC,CAAC;EACrB,IAAME,KAAK,GAAGF,IAAI,CAAC,CAAC,CAAC;EACrB,IAAMG,KAAK,GAAGH,IAAI,CAAC,CAAC,CAAC;EACrB,IAAMI,KAAK,GAAGJ,IAAI,CAAC,CAAC,CAAC;EAErB,IAAIL,KAAK;EACT,IAAIC,OAAO,GAAG,CAAC,CAAC;EAChB,IAAIC,QAAQ;;EAEZ;EACA;EACA,IAAI,OAAOI,KAAK,KAAK,QAAQ,EAC7B;IACC;IACA;IACA;IACA,IAAI,CAAC,IAAAI,oBAAQ,EAACH,KAAK,CAAC,EACpB;MACC,IAAIE,KAAK,EACT;QACCR,OAAO,GAAGO,KAAK;QACfN,QAAQ,GAAGO,KAAK;MACjB,CAAC,MAED;QACCP,QAAQ,GAAGM,KAAK;MACjB;;MAEA;MACA;MACA;MACA;MACA;MACA,IAAI,IAAAG,+BAAmB,EAACL,KAAK,CAAC,EAC9B;QACCN,KAAK,GAAG,IAAAY,iBAAK,EAACN,KAAK,EAAE;UAAEO,cAAc,EAAEN;QAAM,CAAC,EAAEL,QAAQ,CAAC;MAC1D,CAAC,MAED;QACCF,KAAK,GAAG,CAAC,CAAC;MACX;IACD;IACA;IACA;IACA;IAAA,KAEA;MACC,IAAIQ,KAAK,EACT;QACCP,OAAO,GAAGM,KAAK;QACfL,QAAQ,GAAGM,KAAK;MACjB,CAAC,MAED;QACCN,QAAQ,GAAGK,KAAK;MACjB;;MAEA;MACA;MACA;MACA;MACA;MACA,IAAI,IAAAI,+BAAmB,EAACL,KAAK,CAAC,EAC9B;QACCN,KAAK,GAAG,IAAAY,iBAAK,EAACN,KAAK,EAAEQ,SAAS,EAAEZ,QAAQ,CAAC;MAC1C,CAAC,MAED;QACCF,KAAK,GAAG,CAAC,CAAC;MACX;IACD;EACD;EACA;EACA;EAAA,KACK,IAAI,IAAAU,oBAAQ,EAACJ,KAAK,CAAC,EACxB;IACCN,KAAK,GAAGM,KAAK;IAEb,IAAIE,KAAK,EACT;MACCP,OAAO,GAAGM,KAAK;MACfL,QAAQ,GAAGM,KAAK;IACjB,CAAC,MAED;MACCN,QAAQ,GAAGK,KAAK;IACjB;EACD,CAAC,MACI,MAAM,IAAIQ,SAAS,CAAC,oFAAoF,CAAC;EAE9G,OAAO;IACNf,KAAK,EAALA,KAAK;IACLC,OAAO,EAAPA,OAAO;IACPC,QAAQ,EAARA;EACD,CAAC;AACF","ignoreList":[]}