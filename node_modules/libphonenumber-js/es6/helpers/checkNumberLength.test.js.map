{"version":3,"file":"checkNumberLength.test.js","names":["Metadata","metadata","type","oldMetadata","checkNumberLength","checkNumberLengthForType","describe","it","expect","checkNumberLengthWithCountry","to","equal","undefined","checkNumberLengthWithoutCountry","_oldMetadata","country","_metadata","number"],"sources":["../../source/helpers/checkNumberLength.test.js"],"sourcesContent":["import Metadata from '../metadata.js'\r\nimport metadata from '../../metadata.max.json' with { type: 'json' }\r\nimport oldMetadata from '../../test/metadata/1.0.0/metadata.min.json' with { type: 'json' }\r\n\r\nimport checkNumberLength, { checkNumberLengthForType } from './checkNumberLength.js'\r\n\r\ndescribe('checkNumberLength', () => {\r\n\tit('should check phone number length', () => {\r\n\t\t// Too short.\r\n\t\texpect(checkNumberLengthWithCountry('800555353', 'RU', 'FIXED_LINE')).to.equal('TOO_SHORT')\r\n\t\t// Normal.\r\n\t\texpect(checkNumberLengthWithCountry('8005553535', 'RU', 'FIXED_LINE')).to.equal('IS_POSSIBLE')\r\n\t\t// Too long.\r\n\t\texpect(checkNumberLengthWithCountry('80055535355', 'RU', 'FIXED_LINE')).to.equal('TOO_LONG')\r\n\r\n\t\t// No such type.\r\n\t\texpect(checkNumberLengthWithCountry('169454850', 'AC', 'VOIP')).to.equal('INVALID_LENGTH')\r\n\t\t// No such possible length.\r\n\t\texpect(checkNumberLengthWithCountry('1694548', 'AD', undefined)).to.equal('INVALID_LENGTH')\r\n\r\n\t\t// FIXED_LINE_OR_MOBILE\r\n\t\texpect(checkNumberLengthWithCountry('1694548', 'AD', 'FIXED_LINE_OR_MOBILE')).to.equal('INVALID_LENGTH')\r\n\t\t// No mobile phones.\r\n\t\texpect(checkNumberLengthWithCountry('8123', 'TA', 'FIXED_LINE_OR_MOBILE')).to.equal('IS_POSSIBLE')\r\n\t\t// No \"possible lengths\" for \"mobile\".\r\n\t\texpect(checkNumberLengthWithCountry('81234567', 'SZ', 'FIXED_LINE_OR_MOBILE')).to.equal('IS_POSSIBLE')\r\n\t})\r\n\r\n\tit('should check phone number length (no `country` specified)', () => {\r\n\t\t// Too short.\r\n\t\texpect(checkNumberLengthWithoutCountry('800555353', 'RU', 'FIXED_LINE')).to.equal('TOO_SHORT')\r\n\t\t// Normal.\r\n\t\texpect(checkNumberLengthWithoutCountry('8005553535', 'RU', 'FIXED_LINE')).to.equal('IS_POSSIBLE')\r\n\t\t// Too long.\r\n\t\texpect(checkNumberLengthWithoutCountry('80055535355', 'RU', 'FIXED_LINE')).to.equal('TOO_LONG')\r\n\r\n\t\t// No such type.\r\n\t\texpect(checkNumberLengthWithoutCountry('169454850', 'AC', 'VOIP')).to.equal('INVALID_LENGTH')\r\n\t\t// No such possible length.\r\n\t\texpect(checkNumberLengthWithoutCountry('1694548', 'AD', undefined)).to.equal('INVALID_LENGTH')\r\n\r\n\t\t// FIXED_LINE_OR_MOBILE\r\n\t\texpect(checkNumberLengthWithoutCountry('1694548', 'AD', 'FIXED_LINE_OR_MOBILE')).to.equal('INVALID_LENGTH')\r\n\t\t// No mobile phones.\r\n\t\texpect(checkNumberLengthWithoutCountry('8123', 'TA', 'FIXED_LINE_OR_MOBILE')).to.equal('IS_POSSIBLE')\r\n\t\t// No \"possible lengths\" for \"mobile\".\r\n\t\texpect(checkNumberLengthWithoutCountry('81234567', 'SZ', 'FIXED_LINE_OR_MOBILE')).to.equal('IS_POSSIBLE')\r\n\t})\r\n\r\n\tit('should work for old metadata', function() {\r\n\t\tconst _oldMetadata = new Metadata(oldMetadata)\r\n\t\t_oldMetadata.country('RU')\r\n\t\texpect(checkNumberLengthForType('8005553535', 'RU', 'FIXED_LINE', _oldMetadata)).to.equal('IS_POSSIBLE')\r\n\t})\r\n\r\n\tit('should work for old metadata (no `country` specified)', function() {\r\n\t\tconst _oldMetadata = new Metadata(oldMetadata)\r\n\t\t_oldMetadata.country('RU')\r\n\t\texpect(checkNumberLengthForType('8005553535', undefined, 'FIXED_LINE', _oldMetadata)).to.equal('IS_POSSIBLE')\r\n\t})\r\n\r\n\tit('should handle the cases when multiple countries share the same country calling code and a phone number is possible in non-\"main\" country and is not possible in the \"main\" country', () => {\r\n\t\tconst _metadata = new Metadata(metadata)\r\n\t\t_metadata.country('US')\r\n\r\n\t\texpect(checkNumberLength('3100000', undefined, _metadata)).to.equal('TOO_SHORT');\r\n\t\texpect(checkNumberLength('3100000', 'US', _metadata)).to.equal('TOO_SHORT');\r\n\t\texpect(checkNumberLength('3100000', 'CA', _metadata)).to.equal('IS_POSSIBLE');\r\n\t})\r\n})\r\n\r\nfunction checkNumberLengthWithCountry(number, country, type) {\r\n\tconst _metadata = new Metadata(metadata)\r\n\t_metadata.country(country)\r\n\treturn checkNumberLengthForType(number, country, type, _metadata)\r\n}\r\n\r\nfunction checkNumberLengthWithoutCountry(number, country, type) {\r\n\tconst _metadata = new Metadata(metadata)\r\n\t_metadata.country(country)\r\n\treturn checkNumberLengthForType(number, undefined, type, _metadata)\r\n}"],"mappings":"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","ignoreList":[]}