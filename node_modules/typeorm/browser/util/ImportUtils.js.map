{"version":3,"sources":["../browser/src/util/ImportUtils.ts"],"names":[],"mappings":"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","file":"ImportUtils.js","sourcesContent":["import fs from \"fs/promises\"\nimport path from \"path\"\nimport { pathToFileURL } from \"url\"\n\nexport async function importOrRequireFile(\n    filePath: string,\n): Promise<[any, \"esm\" | \"commonjs\"]> {\n    const tryToImport = async (): Promise<[any, \"esm\"]> => {\n        // `Function` is required to make sure the `import` statement wil stay `import` after\n        // transpilation and won't be converted to `require`\n        return [\n            // eslint-disable-next-line @typescript-eslint/no-implied-eval\n            await Function(\"return filePath => import(filePath)\")()(\n                filePath.startsWith(\"file://\")\n                    ? filePath\n                    : pathToFileURL(filePath).toString(),\n            ),\n            \"esm\",\n        ]\n    }\n    const tryToRequire = (): [any, \"commonjs\"] => {\n        return [require(filePath), \"commonjs\"]\n    }\n\n    const extension = filePath.substring(filePath.lastIndexOf(\".\") + \".\".length)\n\n    if (extension === \"mjs\" || extension === \"mts\") return tryToImport()\n    else if (extension === \"cjs\" || extension === \"cts\") return tryToRequire()\n    else if (extension === \"js\" || extension === \"ts\") {\n        const packageJson = await getNearestPackageJson(filePath)\n\n        if (packageJson != null) {\n            const isModule = (packageJson as any)?.type === \"module\"\n\n            if (isModule) return tryToImport()\n            else return tryToRequire()\n        } else return tryToRequire()\n    }\n\n    return tryToRequire()\n}\n\nconst packageJsonCache = new Map<string, object | null>()\nconst MAX_CACHE_SIZE = 1000\n\nfunction setPackageJsonCache(paths: string[], packageJson: object | null) {\n    for (const path of paths) {\n        // Simple LRU-like behavior: if we're at capacity, remove oldest entry\n        if (\n            packageJsonCache.size >= MAX_CACHE_SIZE &&\n            !packageJsonCache.has(path)\n        ) {\n            const firstKey = packageJsonCache.keys().next().value\n            if (firstKey) packageJsonCache.delete(firstKey)\n        }\n        packageJsonCache.set(path, packageJson)\n    }\n}\n\nasync function getNearestPackageJson(filePath: string): Promise<object | null> {\n    let currentPath = filePath\n    const paths: string[] = []\n\n    while (currentPath !== path.dirname(currentPath)) {\n        currentPath = path.dirname(currentPath)\n\n        // Check if we have already cached the package.json for this path\n        if (packageJsonCache.has(currentPath)) {\n            setPackageJsonCache(paths, packageJsonCache.get(currentPath)!)\n            return packageJsonCache.get(currentPath)!\n        }\n\n        // Add the current path to the list of paths to cache\n        paths.push(currentPath)\n\n        const potentialPackageJson = path.join(currentPath, \"package.json\")\n\n        try {\n            const stats = await fs.stat(potentialPackageJson)\n            if (!stats.isFile()) {\n                continue\n            }\n\n            try {\n                const parsedPackage = JSON.parse(\n                    await fs.readFile(potentialPackageJson, \"utf8\"),\n                )\n                // Cache the parsed package.json object and return it\n                setPackageJsonCache(paths, parsedPackage)\n                return parsedPackage\n            } catch {\n                // If parsing fails, we still cache null to avoid repeated attempts\n                setPackageJsonCache(paths, null)\n                return null\n            }\n        } catch {\n            continue\n        }\n    }\n\n    // the top of the file tree is reached\n    setPackageJsonCache(paths, null)\n    return null\n}\n"],"sourceRoot":".."}